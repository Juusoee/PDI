<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function loginCtrl(
	$scope,
	$http,
	$window,
	$location,
	glideUserSession,
	glideSystemProperties,
	spUtil
) {
	var c = this;
	c.remember_me = c.data.forgetMeDefault;
	c.data.url_suffix = $scope.portal ? $scope.portal.url_suffix : "";
	c.masked = true;
	if (!c.data.is_logged_in && c.data.multisso_enabled && c.data.default_idp) {
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;
		c.server
			.get({
				action: "set_sso_destination",
				pageURI: isLoginPage ? null : c.data.pageURI,
			})
			.then(function () {
				$window.location =
					"/login_with_sso.do?glide_sso_id=" + c.data.default_idp;
			});
	} else if (
		!c.data.is_logged_in &&
		c.data.certAuthRedirect &&
		c.data.cert_based_auth &&
		c.data.certHeader == "true"
	) {
		login(null, null, true);
	}

	c.login = function (username, password, isCertLogin) {
		login(username, password, isCertLogin);
	};

	function login(username, password, isCertLogin) {
		var url = spUtil.getURL({ sysparm_type: "view_form.login" });

		// If the page isn't public, then the ID in the
		// URL won't match the rendered page ID
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;

		return $http({
			method: "post",
			url: url,
			data: $.param({
				sysparm_type: "login",
				"ni.nolog.user_password": true,
				remember_me: !!c.remember_me ? true : false,
				user_name: username,
				user_password: password,
				get_redirect_url: true,
				is_direct_redirect: true,
				sysparm_goto_url: isLoginPage ? null : $location.url(),
				mfa_redirect_url: isLoginPage ? null : c.data.pageURI,
				cert_login: !!isCertLogin,
			}),
			headers: {
				"Content-Type": "application/x-www-form-urlencoded",
			},
		}).then(
			function (response) {
				if (!response.data) {
					c.message = $scope.data.errorMsg;
					return;
				}

				if (response.data.status == "success") {
					if (c.data.multiFactorAuthEnabled) {
						c.server
							.get({
								action: "multi_factor_auth_setup",
								directTo: response.data.redirect_url,
							})
							.then(handleLoginSuccess.bind(response));
					} else {
						handleLoginSuccess.call(response);
					}
				} else if (response.data.status == "mfa_code_required") {
					$window.location = "/validate_multifactor_auth_code.do";
				} else {
					// wrong username or password
					c.message = response.data.message;
					c.password = "";
					c.username = "";
					angular.element("#username").focus();
				}
			},
			function errorCallback(response) {
				c.message = $scope.data.errorMsg;
			}
		);
	}

	c.oidcLogin = function (idProvider) {
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;
		c.server
			.get({
				action: "set_sso_destination",
				pageURI: isLoginPage ? null : c.data.pageURI,
			})
			.then(function () {
				$window.location = "/login_with_sso.do?glide_sso_id=" + idProvider;
			});
	};

	c.externalLogin = function () {
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;
		c.server
			.get({
				action: "set_sso_destination",
				pageURI: isLoginPage ? null : c.data.pageURI,
			})
			.then(function () {
				glideSystemProperties.set("glide.authenticate.multisso.enabled", true);

				glideUserSession.getSsoRedirectUrlForUsername(c.username).then(
					function (url) {
						$window.location = url;
					},
					function (err) {
						spUtil.addErrorMessage($scope.data.errorMsg2);
					}
				);
			});
	};

	function handleLoginSuccess() {
		c.success = this.data.message;
		$window.location = this.data.redirect_url;
		if ($window.location.hash.length > 0) $window.location.reload();
	}

	c.setExternalLogin = function (newVal) {
		c.externalLoginMode = newVal;
		if (!newVal) c.masked = true;
	};

	c.renderMaskIcon = function () {
		var passwordEle = document.getElementById("password");
		var maskEle = document.getElementById("mask_icon");
		var btnDescription = document.getElementById("btnDescription");
		var element = document.getElementsByClassName("mask_btn")[0];
		var isPasswordType = passwordEle.type === "password";
		maskEle.classList.toggle("active", isPasswordType);
		maskEle.setAttribute(
			"data-original-title",
			isPasswordType ? "Hide password" : "Show password"
		);
		element.setAttribute(
			"aria-label",
			isPasswordType ? "Hide password" : "Show password"
		);
		passwordEle.type = isPasswordType ? "text" : "password";
		btnDescription.textContent = isPasswordType
			? "Password shown"
			: "Password hidden";
	};

	// Function for Sign up and Sign in transition
	// Function Calls CSS onClick
	$scope.signUp = function () {
		var container = document.getElementById("container");
		container.classList.add("right-panel-active");
	};
	$scope.signIn = function () {
		var container = document.getElementById("container");
		container.classList.remove("right-panel-active");
	};
	$scope.submitForm = function () {
		var input = {};
		input.action = "getAccess";
		input.fname = c.fname;
		input.lname = c.lname;
		input.email = c.email;
		c.server.get(input).then(function (r) {
		//Logging purposes 
		});
	};

}
]]></client_script>
        <controller_as>c</controller_as>
        <css>
.sp-login-widget { 
  
  .panel-body {
    padding: 15px 15px 10px;
  }
  
  .form-control,
  label[for="username"],
  label[for="password"] {
    color: black;
  }
  
  .btn {
    font-weight: 600;
    font-size: 2.0rem;
    background-color: $login-btn-bg;
    border-color: $login-btn-border;
  }
  
  .list-group {
    margin-bottom: 12px;
  }
  
  .login-button-old {
    margin-top: 7px;
  }
  
  .login-alert {
    margin-left: 0px;
    margin-right: 0px;
  }

}
//STRY50033370: Forgot Password link in the login widget
//Start -- login widget advanced view
.sp-login-widget.advanced {  
  .panel-title {
    font-size: 25px;
  }
  
  .panel-default &gt; .panel-heading {
    background-color: $panel-bg; 
    border: 0px;    
  }
  
  .panel-body {
    padding: 0px 0px 10px;
  }

  [placeholder]::-webkit-input-placeholder { 
    transition: opacity 0.01s 0.01s ease !important; 
    opacity: 0 !important; 
  }

  .form-signin {
    .list-group-item { 
      border: 0px;
    }
    
    .login-alert {
    margin-left: 15px;
    margin-right: 15px;
    }
    
    .btn {
      font-weight: 400 !important;
      border-color: $brand-primary;
      background-color: $brand-primary;
      border-radius: 2px;
    }

    .forgot-pwd-div {
      padding-right: 15px;
      padding-left: 15px;
      .forgot-text {
        font-size: 16px;	
        line-height: 20px;
        padding-top: 8px;
      }
      
      .btn {
        line-height: 16px;
        font-size: 14px;
        margin-top: 0px;
      }
      
    }
    
    .submit-btn {
      padding-right: 15px;
      padding-left: 15px;
    }
    
    .input-group-advanced {
      margin-top: 10px;
    }

    .input-advanced {
      border: 1px solid $btn-default-border !important;
      border-radius: 3px !important;
      background-color: $panel-bg !important;
    }
    
    .checkbox {
      padding-left: 15px !important; 
    }
   
    .label-advanced {
      position: relative;
      width: 100%;
      padding: 0;
      overflow: visible;
      border: 0;
      height: 19px;
      color: $text-color;
      font-size: 16px;
      line-height: 19px;
    }
    
    .mask_btn {
      background-color: #fcfcfc;
      border-color: #939393;
      border-left : 0px;
      width:fit-content;
      border-top-left-radius: 0px !important;
      border-bottom-left-radius: 0px !important;
      font-size: 1.4rem !important;
      position: relative;

	&amp;.active {
		&amp;:after {
          	background-color: #2e2e2e;
			content: "";
			height: 16px;
			left: 50%;
	    		margin-top: -8px;
			margin-inline-start: -1px;
			margin-block-start: -8px;
			position: absolute;
			top: 50%;
			transform: rotate(45deg);
			width: 1px;
			}
		}
    }

    
    .loginWithBtn {
      padding: 0 1.5rem;
    }
    
  }

}
//End -- login widget advanced view
.sp-self-registration {
  text-align: center;
}
.sp-login-widget {
.bar {
  margin: 12px 0;
  span {
    position: relative;
    display: block;
    text-align: center;

    &amp;:before, &amp;:after {
      content: '';
      position: absolute;
      width: calc(50% - 24px);
      height: 1px;
      background-color: #b3bac7;
      top: 8px;
    }
    &amp;:before {
      right: 0;
    }
    &amp;:after {
      left: 0;
    }
  }
}
button.cert, a.idp {
  background-color: #fff !important;
  border-color: #ccc !important;
  width: 100%;
  margin-bottom: 10px;

  &amp;:hover {
    border-color: #adadad;
    background-color: #e6e6e6;
  }
  img {
    height: 20px;
    width: 20px;
    margin-bottom: 3px;
    margin-right: 9px;
  }
}
  img.eye-icon {
    content:url("eye.svg");
    cursor: pointer;
    width:18px;
    height:18px;
    display: flex;
    justify-content:center;
    align-items:center;
    float:left;
  }
  
  img.eye-icon.slashed {
    content:url("eye-slash.svg");
  }
  
  .password-group {
    display:flex;
    flex-direction:row;
  }
 
  .mask_btn {
      background-color: #fcfcfc;
      border-color: #939393;
      border-left : 0px;
      width:fit-content;
      border-top-left-radius: 0px !important;
      border-bottom-left-radius: 0px !important;
      font-size: 1.4rem !important;
      position: relative;

	&amp;.active {
		&amp;:after {
          	background-color: #2e2e2e;
			content: "";
			height: 16px;
			left: 50%;
	    		margin-top: -8px;
			margin-inline-start: -1px;
			margin-block-start: -8px;
			position: absolute;
			top: 50%;
			transform: rotate(45deg);
			width: 1px;
			}
		}
    }
  input::-ms-reveal,
    input::-ms-clear {
      display: none;
  }
}
// Edits to orginal widget begins here


* {
	box-sizing: border-box;
}
h1 {
	font-weight: bold;
	margin-top: 10;
}

h2 {
	text-align: center;
}

p {
	font-size: 14px;
	font-weight: 100;
	line-height: 20px;
	letter-spacing: 0.5px;
	margin: 20px 0 30px;
}

span {
	font-size: 12px;
}

a {
	color: #333;
	font-size: 14px;
	text-decoration: none;
	margin: 15px 0; 
}

button {
  margin-top: 5px;
	border-radius: 20px;
	border: 1px solid #99D3DF !important;
	background-color: #99D3DF !important;
	color: #FFFFFF;
	font-size: 12px;
	font-weight: bold;
	padding: 12px 45px;
	letter-spacing: 1px;
	text-transform: uppercase;
	transition: transform 80ms ease-in;
}

button:active {
	transform: scale(0.95) !important;
}
button:hover{
  background-color: #88BBD6 !important;
}
button:focus {
  border-radius: 20px !important;
	outline: none !important;
}

button.ghost {
	background-color: transparent;
	border-color: #FFFFFF;
}

form {
	background-color: #FFFFFF;
	display: flex;
	align-items: center;
	justify-content: center;
	flex-direction: column;
	padding: 0 50px;
	height: 100%;
	text-align: center;
}

input {
	background-color: #eee;
	border: none;
	padding: 12px 15px;
	margin: 8px 0;
	width: 100%;
}

.container {
	background-color: #fff;
	border-radius: 10px;
  	box-shadow: 0 14px 28px rgba(0,0,0,0.25), 
			0 10px 10px rgba(0,0,0,0.22);
	position: relative;
	overflow: hidden;
	width: 768px;
	max-width: 100%;
	min-height: 480px;
}

.form-container {
	position: absolute;
	top: 0;
	height: 100%;
	transition: all 0.6s ease-in-out;
}

.sign-in-container {
	left: 0;
	width: 50%;
	z-index: 2;
}

.container.right-panel-active .sign-in-container {
	transform: translateX(100%);
}

.sign-up-container {
	left: 0;
	width: 50%;
	opacity: 0;
	z-index: 1;
}

.container.right-panel-active .sign-up-container {
	transform: translateX(100%);
	opacity: 1;
	z-index: 5;
	animation: show 0.6s;
}

@keyframes show {
	0%, 49.99% {
		opacity: 0;
		z-index: 1;
	}
	
	50%, 100% {
		opacity: 1;
		z-index: 5;
	}
}

.overlay-container {
	position: absolute;
	top: 0;
	left: 50%;
	width: 50%;
	height: 100%;
	overflow: hidden;
	transition: transform 0.6s ease-in-out;
	z-index: 100;
}

.container.right-panel-active .overlay-container{
	transform: translateX(-100%);
}

.overlay {
	background: #99D3DF;
	background: -webkit-linear-gradient(to right, #99D3DF, #88BBD6);
	background: linear-gradient(to right, #99D3DF, #88BBD6);
	background-repeat: no-repeat;
	background-size: cover;
	background-position: 0 0;
	color: #FFFFFF;
	position: relative;
	left: -100%;
	height: 100%;
	width: 200%;
  	transform: translateX(0);
	transition: transform 0.6s ease-in-out;
}

.container.right-panel-active .overlay {
  	transform: translateX(50%);
}

.overlay-panel {
	position: absolute;
	display: flex;
	align-items: center;
	justify-content: center;
	flex-direction: column;
	padding: 0 40px;
	text-align: center;
	top: 0;
	height: 100%;
	width: 50%;
	transform: translateX(0);
	transition: transform 0.6s ease-in-out;
}

.overlay-left {
	transform: translateX(-20%);
}

.container.right-panel-active .overlay-left {
	transform: translateX(0);
}

.overlay-right {
	right: 0;
	transform: translateX(0);
}

.container.right-panel-active .overlay-right {
	transform: translateX(20%);
}

.social-container {
	margin: 20px 0;
}

.social-container a {
	border: 1px solid #DDDDDD;
	border-radius: 50%;
	display: inline-flex;
	justify-content: center;
	align-items: center;
	margin: 0 5px;
	height: 40px;
	width: 40px;
}
.social{
  color: #88BBD6;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>pdi-login</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>PDI-login</name>
        <option_schema>[{"name":"show_panel","section":"Presentation","default_value":"true","label":"Show Panel","type":"boolean"},{"name":"use_advanced","section":"Presentation","default_value":"false","label":"Use Advanced View","type":"boolean"}]</option_schema>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {

    if(input.action == "getAccess"){
        var access = new GlideRecord('u_user_reg_req_122223')
        access.initialize();
        access.status = 'pending'
        access.portal = 'afd32feb97251110fa32f8b3f153af1d'
        access.user_registration_config = '89911cc897f11110fa32f8b3f153afc8'
        access.first_name = input.fname;
        access.last_name = input.lname;
        access.email = input.email;
        access.insert();
    
    }

    options.show_panel = options.show_panel == "true" || options.show_panel == true;

    if (input && input.action === "multi_factor_auth_setup") {
        if (gs.getSession().getProperty("setup_multifactor_authn")) {
            gs.getSession().putProperty("nav_to", input.directTo);
            gs.getSession().putProperty("starting_page", input.directTo);
            gs.getSession().putProperty("is_direct_redirect", "true");
        }
        return;
    }

    // We don't want to set a starting page until we've begun the login process.
    if (input && input.action === "set_sso_destination") {
        var gs_nav_to = gs.getSession().getProperty("nav_to");
        gs.getSession().putProperty("nav_to", null);

        if (input.pageURI) {
            gs.getSession().putProperty("is_direct_redirect", "true");
            gs.getSession().putProperty("starting_page", input.pageURI);
        } else if (!gs.getSession().getProperty("starting_page") && gs_nav_to)
            gs.getSession().putProperty("starting_page", gs_nav_to);
        return;

    }

    // for self registration fields
    var portalRecord = $sp.getPortalRecord();
    var self_registration_field = portalRecord ? portalRecord.getValue("user_registration_config") : "";
    if (self_registration_field) {
        var registration_config = new GlideRecord("sys_user_registration_config");
        registration_config.addActiveQuery();
        registration_config.query('sys_id', self_registration_field);
        if (registration_config.next()) {
            var self_registration_record_producer = registration_config.getValue("record_producer");
            var self_registration_label = registration_config.getValue("registration_label") || gs.getMessage("Sign Up");
            data.self_registration_record_producer = self_registration_record_producer;
            data.self_registration_label = self_registration_label;
        }
    }

    //Enabling certificate based authentication per portal
    if (portalRecord && (portalRecord.getValue('enable_certificate_based_authentication') == 1))
        data.cert_based_auth = gs.getProperty('glide.authenticate.mutual.enabled', 'false') == 'true';
    
    //get the certificate header
    if (data.cert_based_auth) {
	var request = GlideTransaction.get().getRequest();
	var certHeader = request.getHeader("X-Client-Cert");
	if (!certHeader) {
		data.certHeader = "false";
            gs.log("Failed to register PIV/CAC certificate to the user account.");
        } else
		data.certHeader = "true";    
    }

    //Get the OpenID Connect type Identity provider which can be shown on the Portal login page.
    data.isShowLoginWithIdps = false;
    data.isMultiSSOActive = gs.getProperty('glide.authenticate.multisso.enabled', 'false') == 'true';
    var gr = new GlideRecord("oidc_identity_provider");
    if (data.isMultiSSOActive && gr.isValid()) {
        var oidcUtil = new MultiSSO_OidcUtil();
        data.oidcRecords = oidcUtil.getOidcIdpRecords();
        data.isShowLoginWithIdps = (data.oidcRecords.length > 0);
    }    
        

    //STRY50033370: Forgot Password link in the login widget
    data.pswdResetUrl = gs.getProperty('glide.security.password_reset.uri');
    data.forgotPwdLinkProp = gs.getProperty('glide.security.forgot_password.display.link');

    data.errorMsg = gs.getMessage("There was an error processing your request");
    data.errorMsg2 = gs.getMessage("An error has occurred - please contact your system administrator");
    data.passwordMsg = gs.getMessage("Password");
    data.usernameMsg = gs.getMessage("User name");
    data.forgetMe = GlideProperties.getBoolean("glide.ui.forgetme");
    data.forgetMeDefault = GlideProperties.getBoolean('glide.ui.remember.me.default', true);
    data.is_logged_in = gs.getSession().isLoggedIn();
    var bypass_sso = options.bypass_sso == "true";
    data.multisso_enabled = !bypass_sso && GlideProperties.getBoolean("glide.authenticate.multisso.enabled");
    data.default_idp = GlideProperties.get("glide.authenticate.sso.redirect.idp");
    data.pageURI = new GlideSPUtil().getPageUri();
    data.multiFactorAuthEnabled = GlideProperties.getBoolean('glide.authenticate.multifactor', false);
    data.certAuthRedirect = gs.getProperty('glide.authenticate.cert.redirect.enable', 'false') == 'true';

    //STRY53144967: Handle user redirection to specific Identity provider mapped in Custom Url record for Portals
    var customURL = GlideProperties.getBoolean('glide.customurl.enabled', false);
    if (customURL == true && data.multisso_enabled == true) {
		var idp = SNC.CustomURLSPUtil.getAutoRedirectIDPForCustomURLWithPortal();
		if(GlideStringUtil.notNil(idp))
			data.default_idp = idp;
    }


})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-09-02 13:51:09</sys_created_on>
        <sys_id>ad26e7bf97211110fa32f8b3f153af2b</sys_id>
        <sys_name>PDI-login</sys_name>
        <sys_package display_value="PDI" source="7ddcdf2797251110fa32f8b3f153af60">7ddcdf2797251110fa32f8b3f153af60</sys_package>
        <sys_policy/>
        <sys_scope display_value="PDI">7ddcdf2797251110fa32f8b3f153af60</sys_scope>
        <sys_update_name>sp_widget_ad26e7bf97211110fa32f8b3f153af2b</sys_update_name>
        <template><![CDATA[
<div class="container" id="container">
  <div class="form-container sign-up-container">
    
    <form>
      <h1>Create Account</h1>
      <div class="social-container">
        <a href="#" class="social"><i class="fa fa-facebook"></i></a>
        <a href="#" class="social"><i class="fa fa-google-plus"></i></a>
        <a href="#" class="social"><i class="fa fa-linkedin"></i></a>
      </div>
      <span>or use your email for registration</span>
      <input name="fname" id="fname" ng-model="c.fname" type="text"  placeholder="First name" />
      <input id="lname" ng-model="c.lname" placeholder="Last name" />
      <input id="email" ng-model="c.email" ng-required="true" type="email" placeholder="Email" />
      <button ng-click=submitForm() >Sign Up</button>
    </form>
  </div>
  <div class="form-container sign-in-container">
    <div
      ng-if="!data.is_logged_in"
      ng-class="::(c.options.use_advanced == 'true' ? 'advanced' : '')"
    >
      <form
        ng-if="!c.externalLoginMode"
        ng-submit="c.login(c.username, c.password)"
        method="post"
      >
        <div ng-class="::{'panel panel-default': c.options.show_panel}">
          <div ng-if="::c.options.show_panel">
            <h3 class="panel-title">${Login}</h3>
          </div>
          <h1>Sign in</h1>
          <div class="social-container">
            <a href="#" class="social"><i class="fa fa-facebook"></i></a>
            <a href="#" class="social"><i class="fa fa-google-plus"></i></a>
            <a href="#" class="social"><i class="fa fa-linkedin"></i></a>
          </div>
          <span>or use your account</span>
          <div ng-class="::{'panel-body': c.options.show_panel}">
            <div class="list-group list-group-sm">
              <input
                id="username"
                name="username"
                autocapitalize="off"
                ng-keypress="c.message= ''"
                ng-click="c.message= ''"
                class="text-muted"
                type="text"
                autofocus="true"
                ng-model="c.username"
                placeholder="Email"
              />
              <div class="">
                <input
                  id="password"
                  name="password"
                  ng-keypress="c.message=
                  ''"
                  ng-click="c.message= ''"
                  class="text-muted"
                  type="password"
                  ng-model="c.password"
                  placeholder="Password"
                />
              </div>
            </div>

            <div
              ng-if="c.message"
              class="alert alert-secondary login-alert"
              role="alert"
            >
              {{c.message}}
            </div>
            <div
              ng-if="c.success"
              class="alert alert-secondary login-alert"
              role="alert"
            >
              {{c.success}}
            </div>

            <div ng-if="::!c.data.forgetMe" class="checkbox">
              <label>
                <input
                  name="c.remember_me"
                  ng-model="c.remember_me"
                  checked="checked"
                  id="remember_me"
                  type="checkbox"
                  class="checkbox"
                  value="true"
                />
                ${Remember me}
              </label>
            </div>
            <!--STRY50033370: Forgot Password link in the login widget-->
            <div class="forgot-pwd-div m-b">
              <div class="row">
                <div
                  ng-if="::(c.data.forgotPwdLinkProp == 'true')"
                  class="forgot-text"
                  ng-class="::(c.options.use_advanced ==
                  'true' ? 'col-xs-8' : 'col-xs-12')"
                >
                  <a class="forgot-pwd-link" ng-href="{{::c.data.pswdResetUrl}}"
                    >${Forgot Password ?}</a
                  >
                </div>
                <div
                  ng-class="::(c.options.use_advanced == 'true' &&
                  c.data.forgotPwdLinkProp =='true' ? 'col-xs-4' :
                  'col-xs-12')"
                >
                  <button
                    name="login"
                    type="submit"
                    class="btn btn-lg btn-primary btn-block login-button-old"
                  >
                    ${Login}
                  </button>
                </div>
              </div>
            </div>
            <div
              class="row set-login-type-link m-t"
              ng-if="::data.multisso_enabled"
            >
              <div class="col-xs-12 text-center">
                <a href="javascript:void(0)" ng-click="c.setExternalLogin(true)"
                  >${Use external login}</a
                >
              </div>
            </div>
            <div
              ng-class="col-xs-12"
              ng-if="data.cert_based_auth ||
              data.isShowLoginWithIdps"
            >
              <p class="bar"><span>${OR}</span></p>
            </div>
            <div
              ng-class="col-xs-12"
              ng-if="::c.data.cert_based_auth"
              class="loginWithBtn"
            >
              <button
                name="login"
                type="button"
                class="cert btn btn-lg btn-default"
                ng-click="c.login(null, null, true)"
              >
                <img alt="" ng-src="certLoginLogo.svg" />${Login with PIV/CAC
                card}
              </button>
            </div>
            <div ng-repeat="a in ::c.data.oidcRecords">
              <div ng-class="col-xs-12" class="loginWithBtn">
                <a
                  name="login"
                  class="idp btn btn-lg btn-default"
                  href="javascript:void(0)"
                  ng-click="c.oidcLogin(a.sysId)"
                >
                  <img
                    ng-if="::a.isLogoUrlValid"
                    alt=""
                    ng-src="{{::a.logoUrl}}"
                  />${Log in with} {{::a.name}}
                </a>
              </div>
            </div>
          </div>
        </div>
      </form>
      <form
        ng-if="c.externalLoginMode"
        class="form-signin"
        ng-submit="c.externalLogin()"
        method="post"
      >
        <div ng-class="::{'panel panel-default': c.options.show_panel}">
          <div ng-if="::c.options.show_panel" class="panel-heading">
            <h3 class="panel-title">${External Login}</h3>
          </div>

          <div ng-class="::{'panel-body': c.options.show_panel}">
            <div class="list-group list-group-sm">
              <div class="list-group-item">
                <label for="username" class="label-advanced">${User ID}</label>
                <input
                  id="username"
                  name="username"
                  ng-click="message= ''"
                  class="form-control input-advanced"
                  type="text"
                  autofocus="true"
                  ng-model="c.username"
                />
              </div>
            </div>

            <div class="submit-btn row">
              <div class="col-xs-12">
                <button
                  name="login"
                  type="submit"
                  class="btn btn-lg btn-primary btn-block"
                >
                  ${Submit}
                </button>
              </div>
            </div>
            <div class="set-login-type-link row m-t">
              <div class="col-xs-12 text-center">
                <a
                  href="javascript:void(0)"
                  ng-click="c.setExternalLogin(false)"
                  >${Use internal login}</a
                >
              </div>
            </div>
          </div>
        </div>
      </form>
      <!--
      <div
        class="sp-self-registration forgot-pwd-link"
        ng-if="::c.data.self_registration_record_producer"
      >
        ${Don't have an account?}
        <a
          ng-href="/{{::c.data.url_suffix}}?id=sn_user_registration&sys_id={{::c.data.self_registration_record_producer}}"
          >{{::c.data.self_registration_label}}</a
        >
      </div>
      -->
    </div>
  </div>

  <div class="overlay-container">
    
    <div class="overlay">
      
      <div class="overlay-panel overlay-left">
        
        <h1>Welcome Back!</h1>
        <p>
          If you already have an account please click on the sign in, to keep
          connected with us!
        </p>
        <button class="ghost" ng-click=signIn()>Sign In</button>
      </div>
      <div class="overlay-panel overlay-right">
        <h1>Hello, Friend!</h1>
        <p>
          Don't have account yet? Sign up now! Enter your personal details and
          start journey with us
        </p>
        <button class="ghost" ng-click="signUp()" data-toggle="modal" data-target="#exampleModalCenter">Sign Up</button>
      </div>
    </div>
  </div>
</div>
]]></template>
    </sp_widget>
</record_update>
